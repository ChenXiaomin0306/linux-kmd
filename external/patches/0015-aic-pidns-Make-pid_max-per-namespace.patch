From d76df762bd3084d53395f62c0228e0d6cab0b6bc Mon Sep 17 00:00:00 2001
From: "yiyang.wang" <yiyang.wang@intel.com>
Date: Fri, 22 Jan 2021 15:12:19 +0800
Subject: [PATCH 15/18] aic: pidns: Make pid_max per namespace

Each namespace has its own pid_max value, specified by
/proc/sys/kernel/pid_max

It is based on patch from Pavel Emelyanov <xemul@parallels.com>
One line is changed during reabasing to android common kernel
4.14.61

https://lkml.org/lkml/2011/3/3/102

Signed-off-by: yiyang.wang <yiyang.wang@intel.com>
---
 include/linux/pid_namespace.h |  1 +
 kernel/pid.c                  | 38 +++++++++++++++++++++++++++++++++-----
 kernel/pid_namespace.c        |  1 +
 kernel/sysctl.c               | 12 +-----------
 4 files changed, 36 insertions(+), 16 deletions(-)

diff --git a/include/linux/pid_namespace.h b/include/linux/pid_namespace.h
index 49538b1..1d8aa9b 100644
--- a/include/linux/pid_namespace.h
+++ b/include/linux/pid_namespace.h
@@ -25,6 +25,7 @@ struct pid_namespace {
 	struct kref kref;
 	struct idr idr;
 	struct rcu_head rcu;
+	int pid_max;
 	unsigned int pid_allocated;
 	struct task_struct *child_reaper;
 	struct kmem_cache *pid_cachep;
diff --git a/kernel/pid.c b/kernel/pid.c
index b88fe5e..157d2cb 100644
--- a/kernel/pid.c
+++ b/kernel/pid.c
@@ -59,8 +59,8 @@ int pid_max = PID_MAX_DEFAULT;
 
 #define RESERVED_PIDS		300
 
-int pid_max_min = RESERVED_PIDS + 1;
-int pid_max_max = PID_MAX_LIMIT;
+static int pid_max_min = RESERVED_PIDS + 1;
+static int pid_max_max = PID_MAX_LIMIT;
 
 /*
  * PID-map pages start out as NULL, they get allocated upon
@@ -189,6 +189,7 @@ struct pid *alloc_pid(struct pid_namespace *ns)
 		 * Store a null pointer so find_pid_ns does not find
 		 * a partially initialized PID (see below).
 		 */
+		pid_max = tmp->pid_max;
 		nr = idr_alloc_cyclic(&tmp->idr, NULL, pid_min,
 				      pid_max, GFP_ATOMIC);
 		spin_unlock_irq(&pidmap_lock);
@@ -451,20 +452,47 @@ struct pid *find_ge_pid(int nr, struct pid_namespace *ns)
 	return idr_get_next(&ns->idr, &nr);
 }
 
+static int proc_dointvec_pidmax(struct ctl_table *table, int write,
+                 void __user *buffer, size_t *lenp, loff_t *ppos)
+{
+       struct ctl_table tmp;
+
+       tmp = *table;
+       tmp.data = &(task_active_pid_ns(current)->pid_max);
+
+       return proc_dointvec_minmax(&tmp, write, buffer, lenp, ppos);
+}
+
+static struct ctl_table pid_ctl_table[] = {
+       {
+               .procname       = "pid_max",
+               .data           = &init_pid_ns.pid_max,
+               .maxlen         = sizeof (int),
+               .mode           = 0644,
+               .proc_handler   = proc_dointvec_pidmax,
+               .extra1         = &pid_max_min,
+               .extra2         = &pid_max_max,
+       },
+       { }
+};
+
+static struct ctl_path pid_kern_path[] = { { .procname = "kernel" }, { } };
+
 void __init pid_idr_init(void)
 {
 	/* Verify no one has done anything silly: */
 	BUILD_BUG_ON(PID_MAX_LIMIT >= PIDNS_ADDING);
 
 	/* bump default and minimum pid_max based on number of cpus */
-	pid_max = min(pid_max_max, max_t(int, pid_max,
-				PIDS_PER_CPU_DEFAULT * num_possible_cpus()));
+	init_pid_ns.pid_max = min(pid_max_max, max_t(int, PID_MAX_DEFAULT,
+ 				PIDS_PER_CPU_DEFAULT * num_possible_cpus()));
 	pid_max_min = max_t(int, pid_max_min,
 				PIDS_PER_CPU_MIN * num_possible_cpus());
-	pr_info("pid_max: default: %u minimum: %u\n", pid_max, pid_max_min);
+	pr_info("current pid namespace pid_max: default: %u minimum: %u\n", init_pid_ns.pid_max, pid_max_min);
 
 	idr_init(&init_pid_ns.idr);
 
 	init_pid_ns.pid_cachep = KMEM_CACHE(pid,
 			SLAB_HWCACHE_ALIGN | SLAB_PANIC | SLAB_ACCOUNT);
+	register_sysctl_paths(pid_kern_path, pid_ctl_table);
 }
diff --git a/kernel/pid_namespace.c b/kernel/pid_namespace.c
index 95271f1..96351f8 100644
--- a/kernel/pid_namespace.c
+++ b/kernel/pid_namespace.c
@@ -112,6 +112,7 @@ static struct pid_namespace *create_pid_namespace(struct user_namespace *user_ns
 	kref_init(&ns->kref);
 	ns->level = level;
 	ns->parent = get_pid_ns(parent_pid_ns);
+	ns->pid_max = parent_pid_ns->pid_max;
 	ns->user_ns = get_user_ns(user_ns);
 	ns->ucounts = ucounts;
 	ns->pid_allocated = PIDNS_ADDING;
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 4c4fd43..3b0d7cb 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -105,8 +105,7 @@ extern int core_uses_pid;
 extern char core_pattern[];
 extern unsigned int core_pipe_limit;
 #endif
-extern int pid_max;
-extern int pid_max_min, pid_max_max;
+extern int extra_free_kbytes;
 extern int percpu_pagelist_fraction;
 extern int latencytop_enabled;
 extern unsigned int sysctl_nr_open_min, sysctl_nr_open_max;
@@ -793,15 +792,6 @@ static struct ctl_table kern_table[] = {
 	},
 #endif
 	{
-		.procname	= "pid_max",
-		.data		= &pid_max,
-		.maxlen		= sizeof (int),
-		.mode		= 0644,
-		.proc_handler	= proc_dointvec_minmax,
-		.extra1		= &pid_max_min,
-		.extra2		= &pid_max_max,
-	},
-	{
 		.procname	= "panic_on_oops",
 		.data		= &panic_on_oops,
 		.maxlen		= sizeof(int),
-- 
1.8.3.1

