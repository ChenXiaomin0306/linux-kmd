/* SPDX-License-Identifier: MIT */
/*
 * Copyright Â© 2020 Intel Corporation
 */

#ifndef __INTEL_GUC_ABI_H__
#define __INTEL_GUC_ABI_H__

/**
 * DOC: GuC MMIO based communication
 *
 * The MMIO based communication between Host and GuC relies on special
 * hardware registers which format could be defined by the software
 * (so called scratch registers).
 *
 * Each MMIO based message, both Host to GuC (H2G) and GuC to Host (G2H)
 * messages, which maximum length depends on number of available scratch
 * registers, is directly written into those scratch registers.
 *
 * For Gen9+, there are 16 software scratch registers 0xC180-0xC1B8,
 * but no H2G command takes more than 8 parameters and the GuC firmware
 * itself uses an 8-element array to store the H2G message.
 *
 * For Gen11+, there are additional 4 registers 0x190240-0x19024C, which
 * are, regardless on lower count, preffered over legacy ones.
 *
 * The MMIO based communication is mainly used during driver initialization
 * phase to setup the CTB based communication that will be used afterwards.
 *
 * Details of the messages formats depend on GuC firmware version being used
 * by the host driver. Documented here messages are for GuC 45.0 and newer.
 */

#define GUC_MAX_MMIO_MSG_LEN			8

/**
 * DOC: GuC MMIO message format
 *
 * Bits of the first scratch register are treated as a message header,
 * and other registers values are used to hold message payload (data)::
 *
 *      +=======================================================+
 *      |  SCRATCH  |                                           |
 *      +-----------+-------------------------------------------+
 *      | 0 | 31:28 | message ORIGIN/TYPE                       |
 *      |   | 27:24 | message MAGIC                             |
 *      |   |  23:0 | message DATA0 (depends on TYPE)           |
 *      +---+-------+-------------------------------------------+
 *      | 1 |  31:0 | message DATA1 (depends on TYPE)           |
 *      |...|       | message DATA2 (depends on TYPE)           |
 *      | n |       | message DATA3 (depends on TYPE)           |
 *      +=======================================================+
 *
 * Where:
 *  - **TYPE** is a 4b message type identifier.
 *  - **MAGIC** is a 4b message sequence number.
 *    The same sequence number must be included in all related messages.
 *    This field is used for tracking and debug purposes.
 *  - **DATA0..3** bits represents message payload.
 *    Definitions of these bits depends on message **TYPE**.
 *
 * The MSB of the header and **TYPE** indicates origin of the message:
 *  - 0 - message from the Host
 *  - 1 - message from the GuC
 *
 * Currently supported message types are:
 *  - 0x0 - **REQUEST** - represents Host request message to the GuC
 *  - 0xF - **SUCCESS RESPONSE** - GuC reply for the earlier request
 *  - 0xE - **ERROR RESPONSE** - GuC failure reply for the earlier request
 *  - 0xB - **BUSY** - GuC will be processing request for the longer time
 */

#define GUC_MMIO_MSG_ORIGIN			(0x1 << 31)
#define   GUC_MMIO_MSG_ORIGIN_HOST		0u
#define   GUC_MMIO_MSG_ORIGIN_GUC		1u

#define GUC_MMIO_MSG_TYPE			(0xF << 28)
#define   GUC_MMIO_MSG_TYPE_REQUEST		0x0
#define   GUC_MMIO_MSG_TYPE_RESPONSE		0xF
#define   GUC_MMIO_MSG_TYPE_ERROR		0xE
#define   GUC_MMIO_MSG_TYPE_BUSY		0xB

#define GUC_MMIO_MSG_MAGIC			(0xF << 24)
#define   GUC_MMIO_MSG_MAGIC_DEFAULT		0u

/**
 * DOC: GuC MMIO H2G REQUEST
 *
 * The MMIO H2G REQUEST message is used by the Host to request some action
 * to be performed by the GuC::
 *
 *      +=======================================================+
 *      |  SCRATCH  |                                           |
 *      +=======================================================+
 *      | 0 | 31:28 | message TYPE = 0x0 = REQUEST              |
 *      |   | 27:24 | message MAGIC                             |
 *      |   | 23:16 | request SUBCODE (depends on ACTION)       |
 *      |   |  15:0 | request ACTION code                       |
 *      +-------------------------------------------------------+
 *      | 1 |  31:0 | request DATA1 (depends on ACTION/SUBCODE) |
 *      |...|       | request DATA2 (depends on ACTION/SUBCODE) |
 *      | n |  31:0 | request DATA3 (depends on ACTION/SUBCODE) |
 *      +=======================================================+
 *
 * Where:
 *  - **TYPE** must be set to value 0x0.
 *  - **MAGIC** message sequence number is generated by the host.
 *  - **ACTION** represents 16b request action code that defines both
 *    purpose of the request and format of the passed payload data.
 *    List of supported codes depends on GuC version and plaform.
 *    Action code can't be zero.
 *  - **SUBCODE** is optional 8b data related to the **ACTION**.
 *    MBZ if not explicitly defined by given **ACTION**.
 *  - **DATA1..3** are optional 32b payload dwords related to **ACTION**.
 *    Format of each dword is defined by specific **ACTION**.
 */

#define GUC_MMIO_REQUEST_SUBCODE		(0xFF << 16)
#define GUC_MMIO_REQUEST_ACTION			(0xFFFF << 0)
#define   GUC_ACTION_INVALID			0x0000
#define   GUC_ACTION_REGISTER_CTB		0x4505
#define   GUC_ACTION_DEREGISTER_CTB		0x4506

/**
 * DOC: GuC MMIO G2H SUCCESS RESPONSE
 *
 * The MMIO G2H SUCCESS RESPONSE message is used by the GuC to reply to
 * the earlier H2G request message. This message is used if no errors
 * were encountered by the GuC during processing of the request::
 *
 *      +=======================================================+
 *      |  SCRATCH  |                                           |
 *      +=======================================================+
 *      | 0 | 31:28 | message TYPE = 0xF = SUCCESS RESPONSE     |
 *      |   | 27:24 | message MAGIC                             |
 *      |   |  23:0 | response DATA0 (depends on ACTION/SUBCODE)|
 *      +-------------------------------------------------------+
 *      | 1 |  31:0 | response DATA1 (depends on ACTION/SUBCODE)|
 *      |...|       | response DATA2 (depends on ACTION/SUBCODE)|
 *      | n |  31:0 | response DATA3 (depends on ACTION/SUBCODE)|
 *      +=======================================================+
 *
 * Where:
 *  - **TYPE** must be set to value 0xF.
 *  - **MAGIC** must match value used by the host in **REQUEST** message.
 *  - **DATA** is optional payload data related to **ACTION**.
 *    Format is defined by each **ACTION** separately.
 */

#define GUC_MMIO_RESPONSE_DATA0			(0xFFFFFF << 0)

/**
 * DOC: GuC MMIO G2H ERROR RESPONSE
 *
 * The MMIO G2H ERROR RESPONSE message is used by the GuC to reply to
 * the earlier H2G request message. This message is used if some errors
 * were encountered by the GuC during processing of the request::
 *
 *      +=======================================================+
 *      |  SCRATCH  |                                           |
 *      +=======================================================+
 *      | 0 | 31:28 | message TYPE = 0xE = ERROR RESPONSE       |
 *      |   | 27:24 | message MAGIC                             |
 *      |   | 23:16 | reserved MBZ                              |
 *      |   |  15:0 | response STATUS failure code              |
 *      +-------------------------------------------------------+
 *      | 1 |  31:0 | reserved MBZ                              |
 *      |...|       | reserved MBZ                              |
 *      | n |  31:0 | reserved MBZ                              |
 *      +=======================================================+
 *
 * Where:
 *  - **TYPE** must be set to value 0xE.
 *  - **MAGIC** must match value used by the host in **REQUEST** message.
 *  - **STATUS** represents non-zero failure code.
 */

#define GUC_MMIO_ERROR_STATUS			(0xFFFF << 0)
#define   GUC_STATUS_UNKNOWN_ACTION		0x30
#define   GUC_STATUS_INVALID_PARAMS		0x60
#define   GUC_STATUS_INVALID_ADDR		0x80
#define   GUC_STATUS_CTX_NOT_REGISTERED		0x100
#define   GUC_STATUS_NO_LOCAL_MEMORY		0x200
#define   GUC_STATUS_NO_VIRTUALIZATION		0x300
#define   GUC_STATUS_CTB_FULL			0x301
#define   GUC_STATUS_UNAUTHORIZED_REQUEST	0x302
#define   GUC_STATUS_GENERIC_FAIL		0xF000

/**
 * DOC: MMIO G2H BUSY RESPONSE
 *
 * The MMIO G2H BUSY RESPONSE message is used by the GuC to reply to
 * the earlier H2G request message. This message is used if processing
 * of the request will take longer time and final SUCCESS/ERROR response
 * message will be delivered later::
 *
 *      +=======================================================+
 *      |  SCRATCH  |                                           |
 *      +=======================================================+
 *      | 0 | 31:28 | message TYPE = 0xB = BUSY RESPONSE        |
 *      |   | 27:24 | message MAGIC                             |
 *      |   |  23:0 | reserved MBZ                              |
 *      +-------------------------------------------------------+
 *      | 1 |  31:0 | reserved MBZ                              |
 *      |...|       | reserved MBZ                              |
 *      | n |  31:0 | reserved MBZ                              |
 *      +=======================================================+
 *
 * Where:
 *  - **TYPE** must be set to value 0xB.
 *  - **MAGIC** must match value used by the host in **REQUEST** message.
 *  - all other bits are reserved as MBZ.
 */

#endif /* __INTEL_GUC_ABI_H__ */
